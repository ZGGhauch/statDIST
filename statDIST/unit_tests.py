# -------------------------------------------------------------# Unit tests## Author: Ziad Ghauch## Reference# https://en.wikipedia.org/wiki/Statistical_distance# -------------------------------------------------------------from statDIST.divergences import Divergencefrom statDIST.metrics import Metricsimport unittestimport numpy as nprvX = np.random.normal(0.,1.,100).reshape(100,1)class UnitTestDivergence(unittest.TestCase):    ''' Unit testing class for divergence measures '''        # divergence measures        def test_unit_bhat(self):        self.assertEqual(round(Divergence(P=rvX, Q=rvX, shared_axis=False, grid=200).compute_bhat_distance()[0],1), 0.0)            def test_unit_jensen(self):        self.assertEqual(round(Divergence(P=rvX, Q=rvX, shared_axis=False, grid=200).compute_jensen_divergence()[0],1), 0.0)    def test_unit_kl(self):        self.assertEqual(round(Divergence(P=rvX, Q=rvX, shared_axis=False, grid=200).compute_kl_divergence()[0],1), 0.0)    def test_unit_renyi(self):        self.assertEqual(round(Divergence(P=rvX, Q=rvX, shared_axis=False, grid=200).compute_renyi_divergence(0.5)[0],1), 0.0)                             class UnitTestMetrics(unittest.TestCase):    ''' Unit testing class for metrics measures '''        # metrics measures        def test_unit_e_measure(self):        self.assertEqual(round(Metrics(P=rvX, Q=rvX, shared_axis=False, grid=200).compute_e_distance(),1), 0.0)        def test_unit_hsic_measure(self):        self.assertEqual(round(Metrics(P=rvX, Q=rvX, shared_axis=False, grid=200).compute_hsic_measure(.3, .3),1), 0.0)    def test_unit_kantorovich_measure(self):        self.assertEqual(round(Metrics(P=rvX, Q=rvX, shared_axis=False, grid=200).compute_kantorovich_distance(),1), 0.0)            def test_unit_maha_measure(self):        self.assertEqual(round(Metrics(P=rvX, Q=rvX, shared_axis=False, grid=200).compute_maha_distance()[0][0],1), 0.0)            def test_unit_mmd_measure(self):        self.assertEqual(round(Metrics(P=rvX, Q=rvX, shared_axis=False, grid=200).compute_mmd_distance('linear', kernel_par=[]),1), 0.0)            def test_unit_var_measure(self):        self.assertEqual(round(Metrics(P=rvX, Q=rvX, shared_axis=False, grid=200).compute_var_distance()[0],1), 0.0)            if __name__ == '__main__':     unittest.main()